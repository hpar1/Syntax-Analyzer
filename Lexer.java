/* The following code was generated by JFlex 1.6.1 */

/*
* CS 411 Project 1
* Dr. Sang
* Hamza Parekh and Kunal RajPurohit
*/

import java.util.*;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>./Grammar.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\67\1\67\1\1\22\0\1\3\1\54\1\20"+
    "\2\0\1\50\1\55\1\0\1\61\1\62\1\5\1\16\1\60\1\17"+
    "\1\13\1\4\1\10\11\6\1\0\1\57\1\51\1\52\1\53\2\0"+
    "\4\7\1\14\1\7\21\21\1\12\2\21\1\63\1\0\1\64\1\0"+
    "\1\22\1\0\1\26\1\23\1\32\1\34\1\15\1\37\1\45\1\47"+
    "\1\40\1\21\1\31\1\25\1\41\1\27\1\24\1\42\1\21\1\30"+
    "\1\33\1\36\1\35\1\46\1\43\1\11\1\44\1\21\1\65\1\56"+
    "\1\66\7\0\1\67\u1fa2\0\1\67\1\67\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\5\1\7\1\6\1\10\1\11\1\1\14\6\1\12"+
    "\1\13\1\14\1\15\1\16\2\1\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\0\1\30"+
    "\1\0\2\6\1\0\1\31\13\6\1\32\4\6\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\2\27\3\0\1\5"+
    "\13\6\1\41\1\6\1\42\4\6\1\0\1\30\1\0"+
    "\1\6\1\43\10\6\1\44\4\6\1\45\2\6\1\46"+
    "\3\6\1\47\5\6\1\50\3\6\1\51\1\52\1\53"+
    "\1\54\3\6\1\55\1\56\3\6\1\57\1\60\2\6"+
    "\1\61\1\6\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\70\0\250\0\340\0\70\0\u0118"+
    "\0\u0150\0\u0188\0\70\0\u01c0\0\70\0\70\0\u01f8\0\u0230"+
    "\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0"+
    "\0\u0428\0\u0460\0\u0498\0\70\0\u04d0\0\u0508\0\u0540\0\u0578"+
    "\0\u05b0\0\u05e8\0\70\0\70\0\70\0\70\0\70\0\70"+
    "\0\70\0\70\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738"+
    "\0\u01f8\0\70\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888"+
    "\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u0150\0\u09d8\0\u0a10"+
    "\0\u0a48\0\u0a80\0\70\0\70\0\70\0\70\0\70\0\70"+
    "\0\u0ab8\0\70\0\u0af0\0\u0b28\0\u0b60\0\u06c8\0\u0b98\0\u0bd0"+
    "\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90"+
    "\0\u0dc8\0\u0150\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18"+
    "\0\u0f50\0\u0f88\0\u0f88\0\u0fc0\0\u0150\0\u0ff8\0\u1030\0\u1068"+
    "\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\u0150\0\u11b8\0\u11f0"+
    "\0\u1228\0\u1260\0\u0150\0\u1298\0\u12d0\0\u0150\0\u1308\0\u1340"+
    "\0\u1378\0\u0150\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490\0\u0150"+
    "\0\u14c8\0\u1500\0\u1538\0\u0150\0\u0150\0\u0150\0\u0150\0\u1570"+
    "\0\u15a8\0\u15e0\0\u0150\0\u0150\0\u1618\0\u1650\0\u1688\0\u0150"+
    "\0\u0150\0\u16c0\0\u16f8\0\u0150\0\u1730\0\u0150";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\2\11\1\13\1\11\1\14\1\15\1\16\1\17"+
    "\1\11\1\2\1\20\3\11\1\21\1\22\1\11\1\23"+
    "\1\24\1\25\1\11\1\26\1\27\1\30\1\11\1\31"+
    "\1\32\2\11\1\33\1\11\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\73\0\1\4\70\0\1\5\70\0"+
    "\1\53\1\54\70\0\1\10\1\0\1\10\2\0\1\55"+
    "\62\0\5\11\1\0\2\11\3\0\27\11\26\0\1\10"+
    "\1\0\1\10\2\56\1\55\62\0\3\11\1\57\1\11"+
    "\1\0\2\11\3\0\4\11\1\60\22\11\20\0\2\61"+
    "\1\0\15\61\1\62\47\61\6\0\5\11\1\0\2\11"+
    "\3\0\3\11\1\63\3\11\1\64\17\11\26\0\5\11"+
    "\1\0\1\11\1\65\3\0\27\11\26\0\5\11\1\0"+
    "\1\11\1\66\3\0\27\11\26\0\5\11\1\0\2\11"+
    "\3\0\4\11\1\67\22\11\26\0\5\11\1\0\2\11"+
    "\3\0\15\11\1\70\11\11\26\0\5\11\1\0\2\11"+
    "\3\0\3\11\1\71\23\11\26\0\5\11\1\0\2\11"+
    "\3\0\7\11\1\72\17\11\26\0\5\11\1\0\2\11"+
    "\3\0\3\11\1\73\1\11\1\74\21\11\26\0\5\11"+
    "\1\0\2\11\3\0\6\11\1\75\7\11\1\76\1\11"+
    "\1\77\6\11\26\0\5\11\1\0\2\11\3\0\7\11"+
    "\1\100\17\11\26\0\5\11\1\0\2\11\3\0\26\11"+
    "\1\101\26\0\5\11\1\0\2\11\3\0\3\11\1\102"+
    "\23\11\72\0\1\103\67\0\1\104\67\0\1\105\67\0"+
    "\1\106\72\0\1\107\70\0\1\110\11\0\1\53\1\111"+
    "\1\112\65\53\5\113\1\114\62\113\6\0\1\55\1\0"+
    "\1\55\3\0\2\115\60\0\3\116\3\0\2\116\5\0"+
    "\1\116\2\0\1\116\3\0\1\116\1\0\1\116\2\0"+
    "\1\116\36\0\5\11\1\0\2\11\3\0\15\11\1\117"+
    "\11\11\26\0\5\11\1\0\2\11\3\0\12\11\1\120"+
    "\14\11\26\0\5\11\1\0\2\11\3\0\3\11\1\121"+
    "\23\11\26\0\5\11\1\0\1\11\1\122\3\0\27\11"+
    "\26\0\5\11\1\0\2\11\3\0\22\11\1\123\4\11"+
    "\26\0\5\11\1\0\2\11\3\0\5\11\1\124\7\11"+
    "\1\125\11\11\26\0\5\11\1\0\2\11\3\0\5\11"+
    "\1\126\21\11\26\0\5\11\1\0\2\11\3\0\7\11"+
    "\1\127\17\11\26\0\5\11\1\0\2\11\3\0\14\11"+
    "\1\130\12\11\26\0\5\11\1\0\2\11\3\0\14\11"+
    "\1\131\12\11\26\0\5\11\1\0\2\11\3\0\7\11"+
    "\1\132\17\11\26\0\5\11\1\0\2\11\3\0\4\11"+
    "\1\133\22\11\26\0\5\11\1\0\2\11\3\0\15\11"+
    "\1\134\11\11\26\0\5\11\1\0\2\11\3\0\21\11"+
    "\1\135\5\11\26\0\5\11\1\0\2\11\3\0\17\11"+
    "\1\136\7\11\26\0\5\11\1\0\2\11\3\0\17\11"+
    "\1\137\7\11\26\0\5\11\1\0\2\11\3\0\17\11"+
    "\1\140\7\11\22\0\1\112\65\0\5\113\1\141\62\113"+
    "\4\0\1\112\71\0\1\142\1\0\1\142\5\0\2\143"+
    "\56\0\5\11\1\0\1\11\1\144\3\0\27\11\26\0"+
    "\5\11\1\0\1\11\1\145\3\0\27\11\26\0\5\11"+
    "\1\0\2\11\3\0\4\11\1\146\22\11\26\0\5\11"+
    "\1\0\2\11\3\0\5\11\1\147\21\11\26\0\5\11"+
    "\1\0\2\11\3\0\5\11\1\150\21\11\26\0\5\11"+
    "\1\0\2\11\3\0\13\11\1\151\13\11\26\0\5\11"+
    "\1\0\2\11\3\0\14\11\1\152\12\11\26\0\5\11"+
    "\1\0\2\11\3\0\12\11\1\153\14\11\26\0\5\11"+
    "\1\0\2\11\3\0\17\11\1\154\7\11\26\0\5\11"+
    "\1\0\2\11\3\0\2\11\1\155\24\11\26\0\5\11"+
    "\1\0\1\11\1\156\3\0\27\11\26\0\5\11\1\0"+
    "\2\11\3\0\12\11\1\131\14\11\26\0\5\11\1\0"+
    "\1\11\1\157\3\0\27\11\26\0\5\11\1\0\2\11"+
    "\3\0\4\11\1\160\22\11\26\0\5\11\1\0\2\11"+
    "\3\0\6\11\1\161\20\11\26\0\5\11\1\0\2\11"+
    "\3\0\4\11\1\162\22\11\26\0\5\11\1\0\2\11"+
    "\3\0\13\11\1\163\13\11\20\0\4\113\1\112\1\141"+
    "\62\113\6\0\1\142\1\0\1\142\65\0\5\11\1\0"+
    "\2\11\3\0\6\11\1\164\20\11\26\0\5\11\1\0"+
    "\1\11\1\165\3\0\27\11\26\0\5\11\1\0\2\11"+
    "\3\0\10\11\1\166\16\11\26\0\5\11\1\0\2\11"+
    "\3\0\7\11\1\167\17\11\26\0\5\11\1\0\2\11"+
    "\3\0\4\11\1\170\22\11\26\0\5\11\1\0\2\11"+
    "\3\0\7\11\1\171\17\11\26\0\5\11\1\0\2\11"+
    "\3\0\12\11\1\172\14\11\26\0\5\11\1\0\2\11"+
    "\3\0\6\11\1\173\20\11\26\0\5\11\1\0\2\11"+
    "\3\0\4\11\1\174\22\11\26\0\5\11\1\0\2\11"+
    "\3\0\7\11\1\175\17\11\26\0\5\11\1\0\1\11"+
    "\1\176\3\0\27\11\26\0\5\11\1\0\2\11\3\0"+
    "\15\11\1\177\11\11\26\0\5\11\1\0\1\11\1\200"+
    "\3\0\27\11\26\0\5\11\1\0\2\11\3\0\13\11"+
    "\1\201\13\11\26\0\5\11\1\0\2\11\3\0\5\11"+
    "\1\202\21\11\26\0\5\11\1\0\2\11\3\0\7\11"+
    "\1\203\17\11\26\0\5\11\1\0\2\11\3\0\6\11"+
    "\1\204\20\11\26\0\5\11\1\0\2\11\3\0\6\11"+
    "\1\205\20\11\26\0\5\11\1\0\2\11\3\0\24\11"+
    "\1\206\2\11\26\0\5\11\1\0\1\11\1\207\3\0"+
    "\27\11\26\0\5\11\1\0\2\11\3\0\16\11\1\210"+
    "\10\11\26\0\5\11\1\0\2\11\3\0\20\11\1\211"+
    "\6\11\26\0\5\11\1\0\2\11\3\0\4\11\1\212"+
    "\22\11\26\0\5\11\1\0\2\11\3\0\12\11\1\213"+
    "\14\11\26\0\5\11\1\0\2\11\3\0\6\11\1\214"+
    "\20\11\26\0\5\11\1\0\2\11\3\0\5\11\1\215"+
    "\21\11\26\0\5\11\1\0\2\11\3\0\5\11\1\216"+
    "\21\11\26\0\5\11\1\0\1\11\1\217\3\0\27\11"+
    "\26\0\5\11\1\0\2\11\3\0\6\11\1\220\20\11"+
    "\26\0\5\11\1\0\2\11\3\0\23\11\1\221\3\11"+
    "\26\0\5\11\1\0\2\11\3\0\11\11\1\222\15\11"+
    "\26\0\5\11\1\0\2\11\3\0\6\11\1\223\20\11"+
    "\26\0\5\11\1\0\1\11\1\224\3\0\27\11\26\0"+
    "\5\11\1\0\2\11\3\0\15\11\1\225\11\11\26\0"+
    "\5\11\1\0\2\11\3\0\12\11\1\226\14\11\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5992];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\3\1\1\11"+
    "\1\1\2\11\15\1\1\11\6\1\10\11\1\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\11\20\1\6\11\1\1"+
    "\1\11\3\0\23\1\1\0\1\1\1\0\63\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    // anything in between these brackets is copied exactly to the generated class
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }

//     // stores the token as enums so that they have a # associated with them
//   public enum token {
//     _boolean, _break, _class, _double,
//     _else, _extends, _for, _if,
//     _implements, _int, _interface, _newarray,
//     _println, _readln, _return, _string,
//     _void, _while, _plus, _minus,
//     _multiplication, _division, _mod, _less,
//     _lessequal, _greater, _greaterequal, _equal,
//     _notequal, _and, _or, _not,
//     _assignop, _semicolon, _comma, _period,
//     _leftparen, _rightparen, _leftbracket, _rightbracket,
//     _leftbrace, _rightbrace, _intconstant, _doubleconstant,
//     _stringconstant, _booleanconstant, _id
//   }

  public class trieStruct {
    public int [] trieSwitch = new int[52]; // representing A-Z a-z
    public ArrayList<Character> symbol = new ArrayList<Character>();
    public ArrayList<Integer> next = new ArrayList<Integer>();

    // constructor to initialize the switch array
    public trieStruct() {
        for (int i = 0; i < this.trieSwitch.length; i++) {
            this.trieSwitch[i] = -1;
        }
    }
  }

  public trieStruct s = new trieStruct();

  // Return array index of character
  public int switchIndex(char c) {
    int k = c;
    if(k >= 65 && k < 97){
      return k-65; // 65 represents A in ASCII
    }
    else{
      return k - 71; // = k - 97 + 26. 97 represents a in ASCII
    }
  }

  public void trie(String str) {
    int first = switchIndex(str.charAt(0));
    int ptr = s.trieSwitch[first]; // initially first letter in switch array

    // No value at the location of first char
    if (ptr == -1) {
        // point to the last entry in symbol table
        s.trieSwitch[first] = s.symbol.size();
        // add the rest of the characters to end of symbol table
        for (int i = 1; i < str.length(); i++) {
            s.symbol.add(str.charAt(i)); // add the rest of the chars
        }
        s.symbol.add('@'); // add delimiter
    }
    // there is a value at the first char location
    else {
        // 2nd character, 'i' is the symbol counter
        int i = 1;
        boolean exit = false;

        if(str.length() == 1) {
            return; // if string is of length 1 and already in table
        }

        while(!exit) {
            // if symbol index of point is the next char
            if (s.symbol.get(ptr) == str.charAt(i)) {
                // if at the end
                if(str.length() -1 <= i) {
                    exit = true;
                    break; // break out of while loop
                }
                i++;
                ptr++;
            }
            else if((s.next.size() > ptr) && (s.next.get(ptr) != -1)) {
                ptr = s.next.get(ptr);
            }
            else {
                while(s.next.size() <= ptr) {
                    //add entries to the trie table
                    s.next.add(-1);
                }

                // Set ptr to next available space in symbol array
                s.next.set(ptr,s.symbol.size());

                //add the rest of the chracters to the trie
                while(i < str.length()) { // end of string not yet reached
                    s.symbol.add(str.charAt(i++));
                }
                //end with the '@' symbol
                s.symbol.add('@');

                exit = true;
                break;
            }
        }
    }
  }
    // print the Switch array
    public void printSwitch(int head, int tail) {
        System.out.printf("%-10s", "switch:");
        int i = 0;
        for (head = head ;head < tail; ++head) {
            i = s.trieSwitch[head];
            if (i == -1) {
                System.out.print("$   ");
            }
            else {
                System.out.printf("%-3d ", i);
            }
        }
        System.out.println("\n");
    }
    
    // print the Symbol array
    public void printSymbol(int head, int tail) {
        System.out.printf("%-10s", "symbol:");
        for(int i = head; i < tail; ++i) {
            System.out.printf("%c   ", s.symbol.get(i));
        }
        System.out.println();
    }
    
    // print the Next array
    public void printNext(int head, int tail) {
        System.out.printf("%-10s", "next:");
        int v = 0;
        for (int i = head; i < tail; ++i) {
            v = s.next.get(i);
            if (v == -1) {
                System.out.print("$   ");
            }
            else {
                System.out.printf("%-3d ", v);
            }
        }
        System.out.println("\n");
    }

    private void equalizeNext() {
        if (s.symbol.size() > s.next.size()) {
            while (s.next.size() != s.symbol.size()) {
                s.next.add(-1);
            }
        }
    }
    // print out all of the arrays in a special format
    public void printTable() {
        String alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        System.out.printf("%-10s","");
        int head = 0;
        int i = 0;
        for (; i < 52; ++i) {
            if ((i+1)%20 == 0) {    // print the Switch array
                System.out.println();
                printSwitch(head,i);
                System.out.printf("%-10s","");
                head = i;
            }
            System.out.printf("%c   ", alpha.charAt(i));
        }
        System.out.println();   // print the Switch array
        printSwitch(head,i);
        equalizeNext();
        i = 0;
        head  = 0;
        System.out.printf("%-10s","");
        for (; i < s.symbol.size(); ++i) {
            if ((i+1)%20 == 0) {    
            // print the Symbol array
                System.out.println();
                printSymbol(head,i);
                printNext(head,i);
                System.out.printf("%-10s","");
                head = i;
            }
            System.out.printf("%-3d ", i);
        }       
        // print the Next array
        // print the Symbol array
        System.out.println();
        printSymbol(head,i);
        printNext(head,i);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 51: break;
          case 2: 
            { System.out.print("\n");
            }
          case 52: break;
          case 3: 
            { System.out.print("division "); return symbol(sym._division);
            }
          case 53: break;
          case 4: 
            { System.out.print("multiplication "); return symbol(sym._multiplication);
            }
          case 54: break;
          case 5: 
            { System.out.print("intconstant "); return symbol(sym._intconstant);
            }
          case 55: break;
          case 6: 
            { System.out.print("id "); trie(yytext()); return symbol(sym._id);
            }
          case 56: break;
          case 7: 
            { System.out.print("period " ); return symbol(sym._period);
            }
          case 57: break;
          case 8: 
            { System.out.print("plus "); return symbol(sym._plus);
            }
          case 58: break;
          case 9: 
            { System.out.print("minus "); return symbol(sym._minus);
            }
          case 59: break;
          case 10: 
            { System.out.print("mod "); return symbol(sym._mod);
            }
          case 60: break;
          case 11: 
            { System.out.print("less "); return symbol(sym._less);
            }
          case 61: break;
          case 12: 
            { System.out.print("assignop "); return symbol(sym._assignop);
            }
          case 62: break;
          case 13: 
            { System.out.print("greater "); return symbol(sym._greater);
            }
          case 63: break;
          case 14: 
            { System.out.print("not "); return symbol(sym._not);
            }
          case 64: break;
          case 15: 
            { System.out.print("semicolon "); return symbol(sym._semicolon);
            }
          case 65: break;
          case 16: 
            { System.out.print("comma "); return symbol(sym._comma);
            }
          case 66: break;
          case 17: 
            { System.out.print("leftparen "); return symbol(sym._leftparen);
            }
          case 67: break;
          case 18: 
            { System.out.print("rightparen "); return symbol(sym._rightparen);
            }
          case 68: break;
          case 19: 
            { System.out.print("leftbracket "); return symbol(sym._leftbracket);
            }
          case 69: break;
          case 20: 
            { System.out.print("rightbracket "); return symbol(sym._rightbracket);
            }
          case 70: break;
          case 21: 
            { System.out.print("leftbrace "); return symbol(sym._leftbrace);
            }
          case 71: break;
          case 22: 
            { System.out.print("rightbrace "); return symbol(sym._rightbrace);
            }
          case 72: break;
          case 23: 
            { System.out.println();
            }
          case 73: break;
          case 24: 
            { System.out.print("doubleconstant "); return symbol(sym._doubleconstant);
            }
          case 74: break;
          case 25: 
            { System.out.print("stringconstant "); return symbol(sym._stringconstant);
            }
          case 75: break;
          case 26: 
            { System.out.print(yytext()+" "); return symbol(sym._if);
            }
          case 76: break;
          case 27: 
            { System.out.print("lessequal "); return symbol(sym._lessequal);
            }
          case 77: break;
          case 28: 
            { System.out.print("equal "); return symbol(sym._equal);
            }
          case 78: break;
          case 29: 
            { System.out.print("greaterequal "); return symbol(sym._greaterequal);
            }
          case 79: break;
          case 30: 
            { System.out.print("notequal "); return symbol(sym._notequal);
            }
          case 80: break;
          case 31: 
            { System.out.print("and "); return symbol(sym._and);
            }
          case 81: break;
          case 32: 
            { System.out.print("or "); return symbol(sym._or);
            }
          case 82: break;
          case 33: 
            { System.out.print(yytext()+" "); return symbol(sym._for);
            }
          case 83: break;
          case 34: 
            { System.out.print(yytext()+" "); return symbol(sym._int);
            }
          case 84: break;
          case 35: 
            { System.out.print(yytext()+" "); return symbol(sym._else);
            }
          case 85: break;
          case 36: 
            { System.out.print("booleanconstant "); return symbol(sym._booleanconstant);
            }
          case 86: break;
          case 37: 
            { System.out.print(yytext()+" "); return symbol(sym._void);
            }
          case 87: break;
          case 38: 
            { System.out.print(yytext()+" "); return symbol(sym._break);
            }
          case 88: break;
          case 39: 
            { System.out.print(yytext()+" "); return symbol(sym._class);
            }
          case 89: break;
          case 40: 
            { System.out.print(yytext()+" "); return symbol(sym._while);
            }
          case 90: break;
          case 41: 
            { System.out.print(yytext()+" "); return symbol(sym._readln);
            }
          case 91: break;
          case 42: 
            { System.out.print(yytext()+" "); return symbol(sym._return);
            }
          case 92: break;
          case 43: 
            { System.out.print(yytext()+" "); return symbol(sym._string);
            }
          case 93: break;
          case 44: 
            { System.out.print(yytext()+" "); return symbol(sym._double);
            }
          case 94: break;
          case 45: 
            { System.out.print(yytext()+" "); return symbol(sym._extends);
            }
          case 95: break;
          case 46: 
            { System.out.print(yytext()+" "); return symbol(sym._boolean);
            }
          case 96: break;
          case 47: 
            { System.out.print(yytext()+" "); return symbol(sym._println);
            }
          case 97: break;
          case 48: 
            { System.out.print(yytext()+" "); return symbol(sym._newarray);
            }
          case 98: break;
          case 49: 
            { System.out.print(yytext()+" "); return symbol(sym._interface);
            }
          case 99: break;
          case 50: 
            { System.out.print(yytext()+" "); return symbol(sym._implements);
            }
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
