/*
* CS 411 Project 2 Syntax Analyzer
* Hamza Parekh
* Kunal Purohit
*/

import java_cup.runtime.*;

// 1) Preliminaries to set up and use the scanner.
/* parser code {:
    // Connect this parser to a scanner!
    
	//scanner s;
    //Parser(scanner s){ this.s=s; }
	private Lexer l;
	//Lexer(Lexer l){this.l = l;}
	public parser(Lexer l){
		super(l);
		this.l = l;
	}
	public int prod_num = 0;
:}*/
parser code 
    {:
    private Lexer lexer;

    public parser(Lexer lex) {
        super(lex);
        this.lexer = lex;
    }

    public int prod_num = 0;
    :};

/* Scan with */

scan with
    {:
        return lexer.next_token();
    :};

/* define how to connect to the scanner! */
//init with {: s.init(); :};
//scan with {: return l.next_token(); :};


// 2) Terminals/Non-terminals
// Terminals
terminal _boolean, _break, _class, _double,
		_else, _extends, _for, _if,
		_implements, _int, _interface, _newarray,
		_println, _readln, _return, _string,
		_void, _while, _plus, _minus,
		_multiplication, _division, _mod, _less,
		_lessequal, _greater, _greaterequal, _equal,
		_notequal, _and, _or, _not,
		_assignop, _semicolon, _comma, _period,
		_leftparen, _rightparen, _leftbracket, _rightbracket,
		_leftbrace, _rightbrace, _intconstant, _doubleconstant,
		_stringconstant, _booleanconstant, _id;
// Non-terminals
non terminal Program, DeclPlus, Decl, VariableDecl,
				Variable, Type, TypePrime, FunctionDecl, Formals,
				VariablePlusComma, ClassDecl, ExtendsID, ImplementsID,
				IDList, FieldStar, Field, InterfaceDecl,
				PrototypeStar, Prototype, StmtBlock, VariableDeclStar,
				StmtStar, Stmt, ExprOptional, IfStmt,
				WhileStmt, ForStmt, BreakStmt, ReturnStmt,
				PrintStmt, ExprList, Expr, Lvalue, 
				Call, Actuals, Constant;

// 3) Precedence (lowest to highest)
precedence nonassoc _assignop;
precedence left _or;
precedence left _and;
precedence left _equal, _notequal;
precedence nonassoc _less, _lessequal, _greater, _greaterequal;
precedence left _plus, _minus;
precedence left _multiplication, _division, _mod;
precedence left _not, _minus; // unary minus
precedence left _leftbracket, _period;
precedence left _else; ///////////////////////////////////////////////

// 4) Grammar
Program ::= DeclPlus {:System.out.print("[reduce 1]");/*To add java code*/:};

DeclPlus ::= DeclPlus Decl | Decl;

Decl ::= VariableDecl | FunctionDecl | ClassDecl | InterfaceDecl ;

VariableDecl ::= Variable _semicolon ;

Variable ::= Type _id ;

//Type ::= _int | _double | _boolean | _string | Type _leftbracket _rightbracket | _id ;
Type ::= _int TypePrime | _double TypePrime | _boolean TypePrime | _string TypePrime | _id TypePrime;
TypePrime ::= _leftbracket _rightbracket TypePrime | ;
//Type ::= _int | _double | _boolean | _string | Type LRbracket | _id ;
//LRbracket ::= _leftbracket _rightbracket;

FunctionDecl ::= Type _id _leftparen Formals _rightparen StmtBlock | _void _id _leftparen Formals _rightparen StmtBlock ;

Formals ::= VariablePlusComma | ; // not putting anything is empty string

VariablePlusComma ::= Variable | Formals _comma Variable ;

ClassDecl ::= _class _id ExtendsID ImplementsID _leftbrace FieldStar _rightbrace ;

ExtendsID ::= _extends _id | ;

ImplementsID ::= _implements IDList | ;

IDList ::= IDList _comma _id | _id ;

FieldStar ::= FieldStar Field| ;

Field ::= VariableDecl | FunctionDecl ;

InterfaceDecl ::= _interface _id _leftbrace PrototypeStar _rightbrace ;

PrototypeStar ::=  Prototype PrototypeStar | ;

Prototype ::= Type _id _leftparen Formals _rightparen _semicolon | _void _id _leftparen Formals _rightparen _semicolon ;

StmtBlock ::= _leftbrace VariableDeclStar StmtStar _rightbrace ;

VariableDeclStar ::= VariableDeclStar VariableDecl | ;

StmtStar ::= Stmt StmtStar | ;

Stmt ::= ExprOptional _semicolon | IfStmt | WhileStmt | ForStmt | BreakStmt | ReturnStmt | PrintStmt | StmtBlock ;
//Stmt ::= ExprOptional _semicolon | IfElseSelect | WhileStmt | ForStmt | BreakStmt | ReturnStmt | PrintStmt | StmtBlock ;

ExprOptional ::= Expr | ;

//IfElseSelect ::= IfStmt | ElseStmt;

IfStmt ::= _if _leftparen Expr _rightparen Stmt _else Stmt | _if _leftparen Expr _rightparen Stmt;

//ElseStmt ::= ;

//ElseStmt ::= _if _leftparen Expr _rightparen Stmt _else Stmt; //_else Stmt | ;

WhileStmt ::= _while _leftparen Expr _rightparen Stmt ;

ForStmt ::= _for _leftparen ExprOptional _semicolon Expr _semicolon ExprOptional _rightparen Stmt ;

BreakStmt ::= _break _semicolon ;

ReturnStmt ::= _return ExprOptional _semicolon ;

PrintStmt ::= _println _leftparen ExprList _rightparen _semicolon ;

ExprList ::= Expr _comma ExprList | Expr ;

Expr ::= Lvalue _assignop Expr | Constant | Lvalue | Call | _leftparen Expr _rightparen |
Expr _plus Expr | Expr _minus Expr | Expr _multiplication Expr | Expr _division Expr | Expr _mod Expr | _minus Expr |
Expr _less Expr | Expr _lessequal Expr | Expr _greater Expr | Expr _greaterequal Expr |
Expr _equal Expr | Expr _notequal Expr | Expr _and Expr | Expr _or Expr | _not Expr |
_readln _leftparen _rightparen | _newarray _leftparen _intconstant _comma Type _rightparen ;

Lvalue ::= _id | Lvalue _leftbracket Expr _rightbracket | Lvalue _period _id ;
//Lvalue ::= _id | Expr _leftbracket Expr _rightbracket | Expr _period _id ;

//Lvalue ::= _id | Lvalue LvalueExtra;
//LvalueExtra ::= _leftbracket Expr _rightbracket | _period _id;

Call ::= _id _leftparen Actuals _rightparen | _id _period _id _leftparen Actuals _rightparen ;

Actuals ::= ExprList | ; // not putting anything is empty string

Constant ::= _intconstant | _doubleconstant | _stringconstant | _booleanconstant ;